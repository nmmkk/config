[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
hook_source = '''
    let g:neoyank#limit = 500
    autocmd BufWinEnter \(*.asc\|*.gpg\) let g:neoyank_disable = 1
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]] # neo-snippet plugin contains neocomplcache snippets source
repo = 'Shougo/neosnippet'
on_event = 'InsertEnter'
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_source = '''
  " Plugin key-mappings.
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)

  " This started behaving weirdly. It does not expand the snippet, but inserted
  " "<Plug>(neosnippet_expand_or_jump)". I am not sure what started to expose
  " this issue.
  """ " SuperTab like snippets behavior.
  """ imap <expr><TAB>    neosnippet#expandable_or_jumpable() ?
  """             \ "\<Plug>(neosnippet_expand_or_jump)"
  """             \: pumvisible() ? "\<C-n>" : "\<TAB>"
  """ smap <expr><TAB>    neosnippet#expandable_or_jumpable() ?
  """             \ "\<Plug>(neosnippet_expand_or_jump)"
  """             \: pumvisible() ? "\<C-n>" : "\<TAB>"

  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  " The location of my snippets
  let s:my_snippet = g:config_home . '/nvim/snippets'
  let g:neosnippet#snippets_directory = s:my_snippet
'''

[[plugins]] # Emmet
repo = 'mattn/emmet-vim'
on_event = 'InsertEnter'
hook_source = '''
    let g:user_emmet_mode = 'i'
    let g:user_emmet_leader_key='<C-E>'
    let g:use_emmet_complete_tag = 1
    let g:user_emmet_settings = {
    \   'variables': {
    \       'lang': "ja"
    \   },
    \   'indentation': '    '
    \}
'''

[[plugins]] # A plugin of http://codic.jp/ for Vim.
repo = 'koron/codic-vim'
on_cmd = 'Codic'

[[plugins]] # EditorConfig
repo = 'editorconfig/editorconfig-vim'
on_path = '.*'
hook_source = '''
    let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
'''


# Languages
[[plugins]] # Vim support for editing fish scripts
repo = 'dag/vim-fish'
on_ft = 'fish'

[[plugins]] # Vim plugin for Todo.txt
repo = 'freitass/todo.txt-vim'
on_ft = 'todo'

[[plugins]]
repo = 'vimperator/vimperator.vim'
on_ft = 'vimperator'

[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = 'toml'

# Markdown
[[plugins]]
### repo = 'plasticboy/vim-markdown'
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown','mkd']
hook_add = '''
    let g:vim_markdown_folding_level = 6
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_math = 1
    let g:vim_markdown_toc_autofit = 1
    let g:vim_markdown_autowrite = 1
    let g:vim_markdown_no_extensions_in_markdown = 1
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_toml_frontmatter = 1
'''
depends = ['vim-markdown-quote-syntax', 'vim-toml']

[[plugins]] # A vim 7.4+ plugin to generate table of contents for Markdown files.
repo = 'mzlogin/vim-markdown-toc'
on_ft = ['markdown', 'mkd']
hook_add = '''
    let g:vmt_auto_update_on_save = 1
    let g:vmt_dont_insert_fence = 0
    let g:vmt_cycle_list_item_markers = 1
'''

[[plugins]] # vim plugin for highliting code in markdown quote
## repo = 'joker1007/vim-markdown-quote-syntax'
repo = 'rcmdnk/vim-markdown-quote-syntax'
hook_add = '''
    let g:markdown_quote_syntax_filetypes = {
          \ 'sh' : {
          \   'start' : '\%(sh\|bash\)',
          \},
          \ 'markdown' : {
          \   'start' : '\%(markdown\|md\)',
          \},
    \}
'''

[[plugins]] # Using the jedi autocompletion library for VIM.
repo = 'davidhalter/jedi-vim'
on_ft = 'python'

[[plugins]] # Vim plugin for .tmux.conf
repo = 'tmux-plugins/vim-tmux'
on_ft = 'tmux'

[[plugins]] # Vim configuration for Rust.
repo = 'rust-lang/rust.vim'
on_ft = 'rust'

[[plugins]] # A vim plugin for syntax highlighting Ansible's common filetypes
repo = 'pearofducks/ansible-vim'
on_ft = 'yaml.ansible'
hook_add = '''
   let g:ansible_unindent_after_newline = 1
'''

