[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # Dark powered asynchronous unite all interfaces for Neovim/Vim8
repo = 'Shougo/denite.nvim'
hook_add = '''
    nnoremap <silent> [MyKey]B :<C-u>Denite buffer -buffer-name=file<CR>
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/neco-vim'
depends = ['deoplete']

[[plugins]]
repo = 'Shougo/neoinclude.vim'
depends = ['deoplete']

[[plugins]]
repo = 'Shougo/neco-syntax'
depends = ['deoplete']

[[plugins]]
repo = 'Rip-Rip/clang_complete'
depends = ['deoplete']

[[plugins]]
repo = 'wellle/tmux-complete.vim'
depends = ['deoplete']

[[plugins]]
repo = 'zchee/deoplete-zsh'
depends = ['deoplete']

[[plugins]]
repo = 'ponko2/deoplete-fish'
depends = ['deoplete']

[[plugins]]
repo = 'zchee/deoplete-asm'
depends = ['deoplete']

[[plugins]] # Integrates GNU GLOBAL source code tag system with VIM.
repo = 'vim-scripts/gtags.vim'
hook_add = '''
    " for GNU GLOBAL (gtags)
    nnoremap [GnuGlobal] <nop>
    nmap <Space>g [GnuGlobal]

    """"        ,q     検索結果Windowを閉じる
    "        [GnuGlobal]g     ソースコードの grep
    "        [GnuGlobal]l     このファイルの関数一覧
    "        [GnuGlobal]j     カーソル以下の定義元を探す
    "        [GnuGlobal]k     カーソル以下の使用箇所を探す
    "        [GnuGlobal]n     次の検索結果へジャンプする
    "        [GnuGlobal]p     前の検索結果へジャンプする
    " nnoremap <silent> [GnuGlobal]q     <C-w><C-w><C-w>q

    " Launch grep mode
    nnoremap <silent> [GnuGlobal]g     :Gtags -g

    " Display list of fucntions in the file.
    nnoremap <silent> [GnuGlobal]l     :Gtags -f %<CR>

    " Jump to where the target is defined.
    """ nnoremap <silent> [GnuGlobal]j     :Gtags <C-r><C-w><CR>
    nnoremap <silent> [GnuGlobal]j     :GtagsCursor<CR>

    " Jump to where the target is used.
    nnoremap <silent> [GnuGlobal]k     :Gtags -r <C-r><C-w><CR>

    " Jump to the next item in quickfix.
    """ nnoremap <silent> [GnuGlobal]n     :cn<CR>
    """ nnoremap <C-j>  :cn<CR>  " ==> I should use ']q' from unimpaired.

    " Jump to the previous item in quickfix.
    """ nnoremap <silent> [GnuGlobal]p     :cp<CR>
    """ nnoremap <C-k>  :cp<CR>  " ==> I should use '[q' from unimpaired.
'''

[[plugins]] # Integrated reference viewer.
repo = 'thinca/vim-ref'
hook_add = '''
" There settings are basically from
" https://github.com/thinca/config/blob/master/dotfiles/dot.vim/vimrc , which
" is written by the author of vim-ref.

let s:plugin_info = expand('~/.local/share/vim/info')
let g:ref_cache_dir = s:plugin_info . '/ref'

let g:ref_open = 'vsplit'

let g:ref_source_webdict_sites = {
\   'alc': {
\       'url': 'http://eow.alc.co.jp/search?q=%s',
\       'keyword_encoding': 'utf-8',
\       'cache': 1
\   },
\   'wikipedia': {
\       'url': 'http://ja.wikipedia.org/wiki/%s',
\       'line': 19
\   },
\   'wiktionary': {
\       'url': 'http://ja.wiktionary.org/wiki/%s',
\       'keyword_encoding': 'utf-8',
\       'cache': 1,
\   },
\   'weblio' : {
\       'url' : 'http://ejje.weblio.jp/content/%s'
\   },
\ }

function! g:ref_source_webdict_sites.alc.filter(output)
    return substitute(a:output, '^.\{-}\ze検索文字列', '', '')
endfunction

function! g:ref_source_webdict_sites.wikipedia.filter(output)
    return join(split(a:output, "\n")[18 :], "\n")
endfunction

function! g:ref_source_webdict_sites.weblio.filter(output)
    let lines = split(a:output, "\n")
    call map(lines, 'substitute(v:val, "\\v(発音記号|音声を聞く|ダウンロード再生)", "", "g")')
    return join(lines[60 : ], "\n")
endfunction

let g:ref_source_webdict_sites.default = 'alc'
let g:ref_source_webdict_use_cache = 1


nnoremap [VimRef] <nop>
nmap <Space>r [VimRef]

nnoremap <silent> [VimRef]<C-k> :<C-u>call ref#jump('normal', 'webdict', {'noenter': 1})<CR>
vnoremap <silent> [VimRef]<C-k> :<C-u>call ref#jump('visual', 'webdict', {'noenter': 1})<CR>
nnoremap <silent> [VimRef]a     :<C-u>Ref webdict alc<Space>
nnoremap <silent> [VimRef]<C-h> :<C-u>Ref <C-r>=ref#detect()<CR><Space>

if !exists('g:ref_detect_filetype')
    let g:ref_detect_filetype = {}
endif
function! g:ref_detect_filetype._(ft)
    return &keywordprg ==# ':help' ? '' : 'man'
endfunction
'''

[[plugins]] # Realtime preview by Vim. (Markdown, reStructuredText, textile)
repo = 'kannokanno/previm'

[[plugins]] # Open URI with your favorite browser from your most favorite editor
repo = 'tyru/open-browser.vim'

[[plugins]] # A light and configurable statusline/tabline for Vim
repo = 'itchyny/lightline.vim'
hook_add = '''
    " (https://github.com/itchyny/lightline.vim)
    let g:lightline = {}

    let g:lightline.component_expand = {
        \ 'linter_checking': 'lightline#ale#checking',
        \ 'linter_warnings': 'lightline#ale#warnings',
        \ 'linter_errors': 'lightline#ale#errors',
        \ 'linter_ok': 'lightline#ale#ok',
        \ }

    let g:lightline.component_type = {
        \ 'linter_chekcing': 'left',
        \ 'linter_warnings': 'warning',
        \ 'linter_errors': 'error',
        \ 'linter_ok': 'left',
        \ }

    let g:lightline.active = {
        \ 'right': [
        \       [ 'lineinfo' ],
        \       [ 'percent' ],
        \       [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ],
        \       [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]
        \ ],
        \ 'left': [
        \   [ 'mode', 'paste' ],
        \   [ 'fugitive', 'readonly', 'filename', 'modified' ]
        \ ]
        \ }

    let g:lightline.colorscheme = 'wombat'

    " As I haven't installed patched fonts, my setting below is just to show git
    " brnach addtionally.
    let g:lightline.component = {
        \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
        \ }

    let g:lightline.component_visible_condition = {
        \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
        \ }
'''

[[plugins]] # Highlights trailing whitespace in red and provides :FixWhitespace to fix it.
repo = 'bronson/vim-trailing-whitespace'

[[plugins]] # Zeal for Vim
repo = 'KabbAmine/zeavim.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]] # A vim plugin to display the indention levels with thin vertical lines
repo = 'Yggdroot/indentLine'

[[plugins]] # surround.vim: quoting/parenthesizing made simple
repo = 'tpope/vim-surround'

[[plugins]] # unimpaired.vim: pairs of handy bracket mappings
repo = 'tpope/vim-unimpaired'

[[plugins]] # repeat.vim: enable repeating supported plugin maps with .
repo = 'tpope/vim-repeat'

[[plugins]] # speeddating.vim: use CTRL-A/CTRL-X to increment dates, times, and more
repo = 'tpope/vim-speeddating'

[[plugins]] # easy to use, file-type sensible comments for Vim. It can handle embedded syntax.
repo = 'tomtom/tcomment_vim'

[[plugins]] # incsearch.vim incrementally highlights ALL pattern matches unlike default 'incsearch'
repo = 'haya14busa/incsearch.vim'
hook_add = '''
    " Replace default search commands
    map /  <Plug>(incsearch-forward)
    map ?  <Plug>(incsearch-backward)

    " One that does not move the cursor
    map g/ <Plug>(incsearch-stay)

    " Turn on hlsearch only during searching
    " :h g:incsearch#auto_nohlsearch
    let g:incsearch#auto_nohlsearch = 1
    map n  <Plug>(incsearch-nohl-n)
    map N  <Plug>(incsearch-nohl-N)
    map *  <Plug>(incsearch-nohl-*)
    map #  <Plug>(incsearch-nohl-#)
    map g* <Plug>(incsearch-nohl-g*)
    map g# <Plug>(incsearch-nohl-g#)
'''

[[plugins]] # CVS/SVN/SVK/git/hg/bzr integration plugin
repo = 'vim-scripts/vcscommand.vim'

[[plugins]] # Run commands quickly.
repo = 'thinca/vim-quickrun'
depends = ['vimproc', 'shabadou']
hook_add = '''
    let s:hook = {
    \    "name" : "dot_done",
    \    "kind" : "hook",
    \    "index_counter" : 0,
    \    "config" : {
    \        "enable" : 0
    \    }
    \}

    function! s:hook.on_ready(session, context)
        let self.index_counter = -2
    endfunction

    function! s:hook.on_output(session, context)
        let self.index_counter += 1
        if self.index_counter < 0
            return
        endif
        let aa_list = [
        \   '(/-v-)/~',
        \   '\(-v-\)~~',
        \   '(/-v-)/~~~',
        \   '\(-v-\)~~~~',
        \   '(/-v-)/~~~~~',
        \   '\(-v-\)~~~~~~',
        \   '(/-v-)/~~~~~~~',
        \   '\(-v-\)~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~~~~~~~~~~~~~',
        \]
        echo aa_list[ self.index_counter / 2 % len(aa_list)  ]
    endfunction

    function! s:hook.on_exit(...)
        echo "Done!"
    endfunction

    call quickrun#module#register(s:hook, 1)
    unlet s:hook

    " hook-shabadoubi_touch_henshin を有効にする
    " shabadoubi_touch_henshin/wait でアニメーションの重みを設定できる
    " 早いと思ったらこの値を大きくすれば遅くなる
    "     \       "hook/shabadoubi_touch_henshin/enable" : 1,
    "     \       "hook/shabadoubi_touch_henshin/wait"   : 20,
    " \       "hook/inu/enable" : 1,
    " \       "hook/inu/wait" : 10,
    " \       "hook/u_nya_/enable" : 1,
    " \       "hook/u_nya_/wait" : 10,

    let g:quickrun_config = {
    \   '_': {
    \       'runner' : 'vimproc',
    \       "runner/vimproc/updatetime" : 40,
    \       'hook/time/enable' : '1',
    \       'outputter' : 'error',
    \       'outputter/error/success' : 'buffer',
    \       'outputter/error/error' : 'quickfix',
    \       'outputter/buffer/split' : ':rightbelow 8sp',
    \       'outputter/buffer/close_on_empty' : 1,
    \       "hook/dot_done/enable" : 1,
    \       "hook/dot_done/wait" : 7,
    \   },
    \   'c': {
    \       'command': 'gcc',
    \       'exec' : ['%c %s -o %s:p:r', '%s:p:r %a', 'rm -f %s:p:r'],
    \       'tempfile' : '{tempname()}.c',
    \       'cmdopt': '-std=c11 -Wall -Wextra',
    \   },
    \}

'''

[[plugins]] # 汎用的な quickrun-hook 集
repo = 'osyo-manga/shabadou.vim'

[[plugins]] # simple memo plugin for Vim
repo = 'glidenote/memolist.vim'
hook_add = '''
    nnoremap [MemoList] <nop>
    nmap <Space>m [MemoList]
    nnoremap [MemoList]n  :MemoNew<CR>
    nnoremap [MemoList]l  :MemoList<CR>
    nnoremap [MemoList]g  :MemoGrep<CR>

    let g:memolist_path = "~/Documents/memo"

    " suffix type (default markdown)
    let g:memolist_memo_suffix = "md"

    " use denite (default 0)
    let g:memolist_denite = 1

    " use arbitrary denite source (default is 'file_rec')
    """let g:memolist_denite_source = "anything"

    " use arbitrary denite option (default is empty)
    """let g:memolist_denite_option = "anything"

    " Custom template
    let g:memolist_template_dir_path = g:memolist_path . "/template"

    " use delimiter of array in yaml front matter (default is ' ')
    let g:memolist_delimiter_yaml_array = ','

    " use when get items from yaml front matter
    " first line string pattern of yaml front matter (default "==========")
    let g:memolist_delimiter_yaml_start = "---"

    " last line string pattern of yaml front matter (default "- - -")
    let g:memolist_delimiter_yaml_end  = "---"
'''

[[plugins]] # Vim plugin: Create your own submodes
repo = 'kana/vim-submode'
hook_add = '''
    call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
    call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
    call submode#leave_with('undo/redo', 'n', '', '<Esc>')
    call submode#map('undo/redo', 'n', '', '-', 'g-')
    call submode#map('undo/redo', 'n', '', '+', 'g+')

    call submode#enter_with('winresize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winresize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winresize', 'n', '', '<C-w>+', '<C-w>+')
    call submode#enter_with('winresize', 'n', '', '<C-w>-', '<C-w>-')
    call submode#leave_with('winresize', 'n', '', '<Esc>')
    call submode#map('winresize', 'n', '', '>', '<C-w>>')
    call submode#map('winresize', 'n', '', '<', '<C-w><')
    call submode#map('winresize', 'n', '', '+', '<C-w>+')
    call submode#map('winresize', 'n', '', '-', '<C-w>-')

    call submode#enter_with('buf', 'n', '', '[MyKey]bj', ':bnext<CR>')
    call submode#enter_with('buf', 'n', '', '[MyKey]bk', ':bprevious<CR>')
    call submode#map('buf', 'n', '', 'j', ':bnext<CR>')
    call submode#map('buf', 'n', '', 'k', ':bprevious<CR>')

    call submode#enter_with('err', 'n', '', '[MyKey]cj', ':cnext<CR>')
    call submode#enter_with('err', 'n', '', '[MyKey]ck', ':cprevious<CR>')
    call submode#map('err', 'n', '', 'j', ':cnext<CR>')
    call submode#map('err', 'n', '', 'k', ':cprevious<CR>')

    call submode#enter_with('tab', 'n', '', '[MyKey]tj', 'gt')
    call submode#enter_with('tab', 'n', '', '[MyKey]tk', 'gT')
    call submode#map('tab', 'n', '', 'j', 'gt')
    call submode#map('tab', 'n', '', 'k', 'gT')
'''

[[plugins]] # Vim plugin: Turn :cd into :tabpagecd, to use one tab page per project
repo = 'kana/vim-tabpagecd'

[[plugins]] # Vim plugin: Switch to the missing file without interaction
repo = 'kana/vim-altr'
hook_add = '''
    nmap <F2>   <Plug>(altr-forward)
    nmap <S-F2> <Plug>(altr-back)

    call altr#reset()
    " Custom rules for ansible
    call altr#define('tasks/%.yml',
    \                'handlers/%.yml',
    \                'vars/%.yml',
    \                'defaults/%.yml',
    \                'meta/%.yml',
    \                'tests/%.yml')
'''

[[plugins]] # Vim script for text filtering and alignment
repo = 'godlygeek/tabular'

# [[plugins]] # Vim script for text filtering and alignment
# repo = 'vim-scripts/ShowMarks'
# hook_add = '''
#     let g:showmarks_include="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
# '''
# 15 Aug 2017: Disable ShowMarks because the following error appears everytime nvim opens.
# > Error detected while processing function <SNR>60_ShowMarks:
# > Not possible to change sign ShowMark0

# [[plugins]] # showing marks using number array in color, easy to trace.
# repo = 'vim-scripts/number-marks'

[[plugins]] # Vim motions on speed!
repo = 'easymotion/vim-easymotion'

[[plugins]] # Asynchronous Lint Engine
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_sign_column_always = 1

    let g:ale_c_gcc_options = '-Wall -Wcast-qual -Wmissing-prototypes -Wpointer-arith -Wshadow -Wstrict-prototypes'
    let g:ale_c_cppcheck_options = '--enable=style,performance,portability,information,missingInclude --std=c11'
    let g:ale_cpp_gcc_options = '-std=c++11 -Wall -Wcast-qual -Wmissing-prototypes -Wpointer-arith -Wshadow -Wstrict-prototypes'
    let g:ale_cpp_cppcheck_options = '--enable=style,performance,portability,information,missingInclude --std=c11'

    " let g:ale_echo_msg_error_str = 'E'
    " let g:ale_echo_msg_warning_str = 'W'
    " let g:ale_echo_msg_info_str = 'I'
    let g:ale_echo_msg_format = '[%linter%] %(code): %%s [%severity%]'

    " Key map
    nnoremap [ALE] <nop>
    nmap <Space>a [ALE]

    nmap <silent> [ALE]k <Plug>(ale_previous_wrap)
    nmap <silent> [ALE]j <Plug>(ale_next_wrap)
'''

[[plugins]] # ALE indicator for the lightline vim plugin
repo = 'maximbaz/lightline-ale'

[[plugins]] # Fuzzy file, buffer, mru, tag, etc finder.
repo = 'kien/ctrlp.vim'
hook_add = '''
    if executable('ag')
        let g:ctrlp_use_caching=0
        let g:ctrlp_user_command='ag %s -i --hidden -g ""'
    endif
'''

[[plugins]] # Library of Vim functions
repo = 'LucHermitte/lh-vim-lib'

[[plugins]] # Per project/tree configuration plugins
repo = 'LucHermitte/local_vimrc'
depends = ['lh-vim-lib']

[[plugins]] # A tree explorer plugin for vim.
repo = 'scrooloose/nerdtree'
hook_add = '''
    nnoremap <silent><C-e> :NERDTreeToggle<CR>
    let g:NERDTreeBookmarksFile=$HOME . '/.config/dein/nerdtree/NERDTreeBookmarks'
'''

[[plugins]] # Vim plugin for intensely orgasmic commenting
repo = 'scrooloose/nerdcommenter'
hook_add = '''
    " Add spaces after comment delimiters by default
    let g:NERDSpaceDelims = 1

    " Use compact syntax for prettified multi-line comments
    let g:NERDCompactSexyComs = 1

    " Align line-wise comment delimiters flush left instead of following code indentation
    let g:NERDDefaultAlign = 'left'

    " Set a language to use its alternate delimiters by default
    let g:NERDAltDelims_java = 1

    " Add your own custom formats or override the defaults
    let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

    " Allow commenting and inverting empty lines (useful when commenting a region)
    let g:NERDCommentEmptyLines = 1

    " Enable trimming of trailing whitespace when uncommenting
    let g:NERDTrimTrailingWhitespace = 1

    " Enable NERDCommenterToggle to check all selected lines is commented or not
    let g:NERDToggleCheckAllLines = 1
'''

[[plugins]] # VIM Table Mode for instant table creation.
repo = 'dhruvasagar/vim-table-mode'
hook_add = '''
    " For Markdown-compatible tables use
    let g:table_mode_corner='|'
'''

[[plugins]] # vim interface for taskwarrior
repo = 'blindFS/vim-taskwarrior'

[[plugins]] # Help folks to align text, eqns, declarations, tables, etc
repo = 'vim-scripts/Align'

[[plugins]] # obsession.vim: continuously updated session files
repo = 'tpope/vim-obsession'

#==================================================
# Colors
#==================================================
[[plugins]] # A dark, low-contrast, Vim colorscheme.
repo = 'romainl/Apprentice'

[[plugins]] # hybrid
repo = 'w0ng/vim-hybrid'

[[plugins]] # dracula
repo = 'dracula/vim'

[[plugins]] # molokai
repo = 'tomasr/molokai'

[[plugins]] # A unite.vim plugin
repo = 'ujihisa/unite-colorscheme'

[[plugins]] # Makes it easy to quickly switch between color schemes in Vim
repo = 'xolox/vim-colorscheme-switcher'
depends = ['vim-misc']

[[plugins]] # Miscellaneous auto-load Vim scripts
repo = 'xolox/vim-misc'

