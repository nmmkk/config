[[plugins]]
repo = 'Shougo/dein.vim'

### [[plugins]]
### repo = 'Shougo/unite.vim'
### hook_add = '''
###     let g:unite_source_grep_command="ag"
###     let g:unite_source_grep_default_opts="-i --nocolor --nogroup"
### '''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]] # Integrates GNU GLOBAL source code tag system with VIM.
repo = 'vim-scripts/gtags.vim'
hook_add = '''
    " for GNU GLOBAL (gtags)
    nnoremap [GnuGlobal] <nop>
    nmap <Space>g [GnuGlobal]
    
    """"        ,q     検索結果Windowを閉じる
    "        [GnuGlobal]g     ソースコードの grep
    "        [GnuGlobal]l     このファイルの関数一覧
    "        [GnuGlobal]j     カーソル以下の定義元を探す
    "        [GnuGlobal]k     カーソル以下の使用箇所を探す
    "        [GnuGlobal]n     次の検索結果へジャンプする
    "        [GnuGlobal]p     前の検索結果へジャンプする
    " nnoremap <silent> [GnuGlobal]q     <C-w><C-w><C-w>q
    
    " Launch grep mode
    nnoremap <silent> [GnuGlobal]g     :Gtags -g
    
    " Display list of fucntions in the file.
    nnoremap <silent> [GnuGlobal]l     :Gtags -f %<CR>
    
    " Jump to where the target is defined.
    """ nnoremap <silent> [GnuGlobal]j     :Gtags <C-r><C-w><CR>
    nnoremap <silent> [GnuGlobal]j     :GtagsCursor<CR>
    
    " Jump to where the target is used.
    nnoremap <silent> [GnuGlobal]k     :Gtags -r <C-r><C-w><CR>
    
    " Jump to the next item in quickfix.
    """ nnoremap <silent> [GnuGlobal]n     :cn<CR>
    """ nnoremap <C-j>  :cn<CR>  " ==> I should use ']q' from unimpaired.
    
    " Jump to the previous item in quickfix.
    """ nnoremap <silent> [GnuGlobal]p     :cp<CR>
    """ nnoremap <C-k>  :cp<CR>  " ==> I should use '[q' from unimpaired.
'''

[[plugins]] # Integrated reference viewer.
repo = 'thinca/vim-ref'

[[plugins]] # Realtime preview by Vim. (Markdown, reStructuredText, textile)
repo = 'kannokanno/previm'

[[plugins]] # Open URI with your favorite browser from your most favorite editor
repo = 'tyru/open-browser.vim'

[[plugins]] # A light and configurable statusline/tabline for Vim
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
    \   'colorscheme': 'wombat'
    \}
'''

[[plugins]] # Highlights trailing whitespace in red and provides :FixWhitespace to fix it.
repo = 'bronson/vim-trailing-whitespace'

[[plugins]] # Zeal for Vim
repo = 'KabbAmine/zeavim.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]] # A vim plugin to display the indention levels with thin vertical lines
repo = 'Yggdroot/indentLine'

[[plugins]] # surround.vim: quoting/parenthesizing made simple
repo = 'tpope/vim-surround'

[[plugins]] # unimpaired.vim: pairs of handy bracket mappings
repo = 'tpope/vim-unimpaired'

[[plugins]] # repeat.vim: enable repeating supported plugin maps with .
repo = 'tpope/vim-repeat'

[[plugins]] # speeddating.vim: use CTRL-A/CTRL-X to increment dates, times, and more
repo = 'tpope/vim-speeddating'

[[plugins]] # easy to use, file-type sensible comments for Vim. It can handle embedded syntax.
repo = 'tomtom/tcomment_vim'

[[plugins]] # incsearch.vim incrementally highlights ALL pattern matches unlike default 'incsearch'
repo = 'haya14busa/incsearch.vim'
hook_add = '''
    " Replace default search commands
    map /  <Plug>(incsearch-forward)
    map ?  <Plug>(incsearch-backward)

    " One that does not move the cursor
    map g/ <Plug>(incsearch-stay)

    " Turn on hlsearch only during searching
    " :h g:incsearch#auto_nohlsearch
    let g:incsearch#auto_nohlsearch = 1
    map n  <Plug>(incsearch-nohl-n)
    map N  <Plug>(incsearch-nohl-N)
    map *  <Plug>(incsearch-nohl-*)
    map #  <Plug>(incsearch-nohl-#)
    map g* <Plug>(incsearch-nohl-g*)
    map g# <Plug>(incsearch-nohl-g#)
'''

[[plugins]] # CVS/SVN/SVK/git/hg/bzr integration plugin
repo = 'vim-scripts/vcscommand.vim'

[[plugins]] # Run commands quickly.
repo = 'thinca/vim-quickrun'
depends = ['vimproc', 'shabadou']
hook_add = '''
    let s:hook = {
    \    "name" : "dot_done",
    \    "kind" : "hook",
    \    "index_counter" : 0,
    \    "config" : {
    \        "enable" : 0
    \    }
    \}
    
    function! s:hook.on_ready(session, context)
        let self.index_counter = -2
    endfunction
    
    function! s:hook.on_output(session, context)
        let self.index_counter += 1
        if self.index_counter < 0
            return
        endif
        let aa_list = [
        \   '(/-v-)/~',
        \   '\(-v-\)~~',
        \   '(/-v-)/~~~',
        \   '\(-v-\)~~~~',
        \   '(/-v-)/~~~~~',
        \   '\(-v-\)~~~~~~',
        \   '(/-v-)/~~~~~~~',
        \   '\(-v-\)~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~~~~~~~~~~~',
        \   '(/-v-)/~~~~~~~~~~~~~~~~~~~~~~~~~',
        \   '\(-v-\)~~~~~~~~~~~~~~~~~~~~~~~~~~',
        \]
        echo aa_list[ self.index_counter / 2 % len(aa_list)  ]
    endfunction
    
    function! s:hook.on_exit(...)
        echo "Done!"
    endfunction

    call quickrun#module#register(s:hook, 1)
    unlet s:hook

    " hook-shabadoubi_touch_henshin を有効にする
    " shabadoubi_touch_henshin/wait でアニメーションの重みを設定できる
    " 早いと思ったらこの値を大きくすれば遅くなる
    "     \       "hook/shabadoubi_touch_henshin/enable" : 1,
    "     \       "hook/shabadoubi_touch_henshin/wait"   : 20,
    " \       "hook/inu/enable" : 1,
    " \       "hook/inu/wait" : 10,
    " \       "hook/u_nya_/enable" : 1,
    " \       "hook/u_nya_/wait" : 10,

    let g:quickrun_config = {
    \   '_': {
    \       'runner' : 'vimproc',
    \       "runner/vimproc/updatetime" : 40,
    \       'hook/time/enable' : '1',
    \       'outputter' : 'error',
    \       'outputter/error/success' : 'buffer',
    \       'outputter/error/error' : 'quickfix',
    \       'outputter/buffer/split' : ':rightbelow 8sp',
    \       'outputter/buffer/close_on_empty' : 1,
    \       "hook/dot_done/enable" : 1,
    \       "hook/dot_done/wait" : 7,
    \   },
    \   'c': {
    \       'command': 'gcc',
    \       'exec' : ['%c %s -o %s:p:r', '%s:p:r %a', 'rm -f %s:p:r'],
    \       'tempfile' : '{tempname()}.c',
    \       'cmdopt': '-std=c11 -Wall -Wextra',
    \   },
    \}

'''

[[plugins]] # 汎用的な quickrun-hook 集
repo = 'osyo-manga/shabadou.vim'

[[plugins]] # simple memo plugin for Vim
repo = 'glidenote/memolist.vim'
hook_add = '''
    nnoremap <Leader>mn  :MemoNew<CR>
    nnoremap <Leader>ml  :MemoList<CR>
    nnoremap <Leader>mg  :MemoGrep<CR>

    let g:memolist_path = "~/Documents/memo"

    " suffix type (default markdown)
    let g:memolist_memo_suffix = "md"

    " use denite (default 0)
    let g:memolist_denite = 1

    " use arbitrary denite source (default is 'file_rec')
    """let g:memolist_denite_source = "anything"

    " use arbitrary denite option (default is empty)
    """let g:memolist_denite_option = "anything"

    " Custom template
    let g:memolist_template_dir_path = g:memolist_path . "/template"

    " use delimiter of array in yaml front matter (default is ' ')
    let g:memolist_delimiter_yaml_array = ','

    " use when get items from yaml front matter
    " first line string pattern of yaml front matter (default "==========")
    let g:memolist_delimiter_yaml_start = "---"

    " last line string pattern of yaml front matter (default "- - -")
    let g:memolist_delimiter_yaml_end  = "---"
'''

[[plugins]] #  Syntax checking hacks for vim
repo = 'vim-syntastic/syntastic'
hook_add = '''
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0

    nnoremap [Syntastic] <nop>
    nmap <Leader>s [Syntastic]

    nnoremap <silent> [Syntastic]c :SyntasticCheck<CR>
    nnoremap <silent> [Syntastic]t :SyntasticToggleMode<CR>
'''

[[plugins]] # Vim plugin: Create your own submodes
repo = 'kana/vim-submode'
hook_add = '''
    call submode#enter_with('bufmove', 'n', '', '[MyKey]>', '<C-w>>')
    call submode#enter_with('bufmove', 'n', '', '[MyKey]<', '<C-w><')
    call submode#enter_with('bufmove', 'n', '', '[MyKey]+', '<C-w>+')
    call submode#enter_with('bufmove', 'n', '', '[MyKey]-', '<C-w>-')
    call submode#map('bufmove', 'n', '', '>', '<C-w>>')
    call submode#map('bufmove', 'n', '', '<', '<C-w><')
    call submode#map('bufmove', 'n', '', '+', '<C-w>+')
    call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

[[plugins]] # Vim plugin: Turn :cd into :tabpagecd, to use one tab page per project
repo = 'kana/vim-tabpagecd'

[[plugins]] # Vim script for text filtering and alignment
repo = 'godlygeek/tabular'

[[plugins]] # Vim script for text filtering and alignment
repo = 'vim-scripts/ShowMarks'
hook_add = '''
    let g:showmarks_include="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
'''

# [[plugins]] # showing marks using number array in color, easy to trace.
# repo = 'vim-scripts/number-marks'

#==================================================
# Colors
#==================================================
[[plugins]] # hybrid
repo = 'w0ng/vim-hybrid'

[[plugins]] # solarized
repo = 'altercation/vim-colors-solarized'

[[plugins]] # dracula
repo = 'dracula/vim'

[[plugins]] # molokai
repo = 'tomasr/molokai'

