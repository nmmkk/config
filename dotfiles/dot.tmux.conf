# tmux configuration file
#
# I referred to the following Qiita site when the initial conf was made.
#   http://qiita.com/succi0303/items/cb396704493476373edf

# First, store tmux version in environment varialbe
# [tmux: Enhance version checking for tmux · powerline/powerline@f39b1dc](https://github.com/powerline/powerline/commit/f39b1dcf201cb73baf98bf84bcab3699ac725f4d)
run-shell "tmux set-environment -g TMUX_VERSION_MAJOR $(tmux -V | cut -d' ' -f2 | cut -d'.' -f1 | sed 's/[^0-9]*//g')"
run-shell "tmux set-environment -g TMUX_VERSION_MINOR $(tmux -V | cut -d' ' -f2 | cut -d'.' -f2 | sed 's/[^0-9]*//g')"
# And we can parse the environment variables later, as like the following examples.
# ---------------------------------------------------------------------------------
# # tmux Version 1.8 adds the 'client_prefix' format variable
# if-shell '[ $TMUX_VERSION_MAJOR -gt 1 -o \( $TMUX_VERSION_MAJOR -eq 1 -a $TMUX_VERSION_MINOR -ge 8 \) ]' \
#   "source "$POWERLINE_BINDINGS_DIR/tmux/powerline_tmux_1.8_plus.conf""
# # tmux Version 1.8 adds a legacy window-status-last-{attr,bg,fg} option
# if-shell '[ $TMUX_VERSION_MAJOR -eq 1 -a $TMUX_VERSION_MINOR -eq 8 ]' \
#   "source "$POWERLINE_BINDINGS_DIR/tmux/powerline_tmux_1.8.conf""
# # tmux Versions 1.8 and earlier use the legacy foo-{attr,bg,fg} options
# if-shell '[ $TMUX_VERSION_MAJOR -eq 1 -a $TMUX_VERSION_MINOR -le 8 ]' \
#   "source "$POWERLINE_BINDINGS_DIR/tmux/powerline_tmux_legacy_common.conf""

# prefixキーをC-tに変更する
set -g prefix C-t

# C-bのキーバインドを解除する
unbind C-b

# キーストロークのディレイを減らす
set -sg escape-time 1

# ウィンドウのインデックスを1から始める
set -g base-index 1

# ペインのインデックスを1から始める
setw -g pane-base-index 1

# 設定ファイルをリロードする
bind r source-file ~/.tmux.conf \; display "Reloaded '~/.tmux.conf'!"

# C-t*2でtmux内のプログラムにC-tを送る
bind C-t send-prefix

# | でペインを縦に分割する
bind | split-window -h

# - でペインを横に分割する
bind - split-window -v

# Vimのキーバインドでペインを移動する
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Vimのキーバインドでペインをリサイズする
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Enable mouse operation
if-shell '[ $TMUX_VERSION_MAJOR -gt 2 -o \( $TMUX_VERSION_MAJOR -eq 2 -a $TMUX_VERSION_MINOR -ge 1 \) ]' \
  "set -g mouse on"
if-shell '[ \( $TMUX_VERSION_MAJOR -eq 2 -a $TMUX_VERSION_MINOR -eq 0 \) -o $TMUX_VERSION_MAJOR -eq 1 ]' \
  "set -g mode-mouse on; set -g mouse-select-pane on; set -g mouse-resize-pane on; set -g mouse-select-window on"

# 256色端末を使用する
### screen-256color caused strange color setting
###  Ref: https://github.com/zsh-users/zsh-history-substring-search/issues/40
### However, ":CheckHealth" in nvim reported screen-256color needs to be set:
###  Ref: https://github.com/neovim/neovim/wiki/FAQ
set-option -g default-terminal "screen-256color"

### # Default shell
### set-option -g default-shell /usr/bin/fish

# ステータスバーの色を設定する
set -g status-fg white
set -g status-bg black

# ウィンドウリストの色を設定する
setw -g window-status-fg cyan
setw -g window-status-bg default
setw -g window-status-attr dim
# アクティブなウィンドウを目立たせる
setw -g window-status-current-fg white
setw -g window-status-current-bg red
setw -g window-status-current-attr bright

# ペインボーダーの色を設定する
set -g pane-border-fg green
set -g pane-border-bg black
# アクティブなペインを目立たせる
set -g pane-active-border-fg white
set -g pane-active-border-bg yellow

# コマンドラインの色を設定する
set -g message-fg white
set -g message-bg black
set -g message-attr bright

# ステータスバーを設定する
## 左パネルを設定する
set -g status-left-length 40
set -g status-left "#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"
## 右パネルを設定する
set -g status-right "#[fg=cyan][%Y-%m-%d(%a) %H:%M]"
# The following option (status-ufs8) is no longer necessary since version 2.2 .
# Ref: https://github.com/tmux/tmux/issues/230
##### ## ステータスバーのUTF-8サポートを有効にする
##### set -g status-utf8 on
## リフレッシュの間隔を設定する(デフォルト 15秒)
set -g status-interval 60
## ウィンドウリストの位置を中心寄せにする
set -g status-justify centre
## ヴィジュアルノーティフィケーションを有効にする
setw -g monitor-activity on
set -g visual-activity on
## ステータスバーを上部に表示する
set -g status-position top

# Save more history lines. The default value 2000 is not big enough.
set-option -g history-limit 20000

### # https://stackoverflow.com/questions/8645053/how-do-i-start-tmux-with-my-current-environment
### # Tried the following, but it did not work as expected
### set-option -ga update-environment ' DISPLAY'

# コピーモードを設定する
## viのキーバインドを使用する
setw -g mode-keys vi
# Configure copy mode
# Ref: [copy-paste mode in tmux 2.4 — userlinux.net](https://userlinux.net/copy-paste-mode-tmux-24.html)
# This version works on tmux 2.4 and later. I tried to keep the compatibility
# for older tmux versions, but gave up because there were many calls of
# if-shell referring to TMUX_VERSION_MAJOR/MINOR were necessary.
#
# It is not clean but "if-shell" is used to get it working on both Linux and macOS.
# TODO: Create an external script to handle clipboard appropriately on macOS/Linux, and tmux.conf calls the script. Ref: [tmuxのPaneの扱いをGNU screenのWindowの取り扱いになるべく近づけてみる](https://rcmdnk.com/blog/2015/01/03/computer-tmux-screen/)
bind-key -T copy-mode-vi "v" send -X begin-selection
bind-key -T copy-mode-vi "V" send -X select-line
if-shell "which pbcopy" 'bind-key -T copy-mode-vi "y" send -X copy-pipe-and-cancel "pbcopy"'
if-shell "which xsel"   'bind-key -T copy-mode-vi "y" send -X copy-pipe-and-cancel "xsel -b -i"'
bind-key p paste-buffer
unbind -T copy-mode-vi Enter
if-shell "which pbcopy" 'bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "pbcopy"'
if-shell "which xsel"   'bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "xsel -b -i"'
if-shell "which pbcopy" 'bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "pbcopy"'
if-shell "which xsel"   'bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "xsel -b -i"'
# C-t > : Send buffer contents to clipboard
if-shell "which pbcopy" 'bind-key > save-buffer ~/.tmux-buffer \; run-shell "pbcopy < ~/.tmux-buffer" \; display-message "Copied to clipboard."'
if-shell "which xsel"   'bind-key > save-buffer ~/.tmux-buffer \; run-shell "xsel -b -i < ~/.tmux-buffer" \; display-message "Copied to clipboard."'
# C-t < : Obtain contents of clipboard and paste it.
if-shell "which pbpaste" 'bind-key < if-shell "pbpaste > ~/.tmux-buffer" "load-buffer ~/.tmux-buffer ; paste-buffer"'
if-shell "which xsel"    'bind-key < if-shell "xsel -b -o > ~/.tmux-buffer" "load-buffer ~/.tmux-buffer ; paste-buffer"'

# Work better with lots of text output
# Ref: http://stackoverflow.com/questions/26723719/tmux-unknown-option-c0-change-interval#33423156
#
# Note that c0-* options have been deleted since version 2.1 .
if-shell '[ \( $TMUX_VERSION_MAJOR -eq 2 -a $TMUX_VERSION_MINOR -eq 0 \) -o $TMUX_VERSION_MAJOR -eq 1 ]' \
  "setw -g c0-change-interval 10; setw -g c0-change-trigger 250"

# I am too lazy to release Ctrl key
bind C-n next-window
bind C-p previous-window
bind C-h select-pane -L
bind C-j select-pane -D
bind C-k select-pane -U
bind C-l select-pane -R

# Obsolete settings {{{1

# Logging
# # Log ログを時刻付きで記録する
# # http://blog.urban-theory.net/2014/07/01/how_toget_tmux_pane_log_with_timestamp
# bind-key H pipe-pane -o 'bash -c "while read -r LINE; do echo \"[\$(date +\"%%Y-%%m-%%dT%%H:%%M:%%S\")] \${LINE}\" >> \${HOME}/log/tmux/\$(date +%Y%m%d-%H%M)-#S-#D.log; done "' \; display-message "Logging start."
# bind-key h pipe-pane \; display-message "Logging end."
#

### # ===== logging =====
### # http://qiita.com/docokano/items/8418cc1b2561df03e8d9
### #
### # C-t C-H Start logging.
### bind-key C-H pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \${HOME}/log/tmux/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "' \; display-message "Logging start."
### # C-t C-h Stop logging
### bind-key C-h pipe-pane \; display-message "Logging end."
### # C-t v Open new window. Logging always. (-n is set window name.)
### bind-key v new-window -n 'logging...' \; pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \${HOME}/log/tmux/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "'

# #===================================
# # Log
# #===================================
#
# # PREFIX C-p Start logging.
# bind-key C-p pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \${HOME}/.tmux/log/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "' \; display-message "Logging start."
# # PREFIX C-o Stop logging
# bind-key C-o pipe-pane \; display-message "Logging end."
# # PREFIX v Open new window. Logging always. (-n is set window name.)
# bind-key v new-window -n 'logging...' \; pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \${HOME}/.tmux/log/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "'

# }}}1

# vim: foldmethod=marker filetype=tmux :
