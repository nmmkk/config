snippet     #!2
abbr        #!/usr/bin/env python2
alias       shebang2
options     head
    #!/usr/bin/env python
    
    ${0:TARGET}

snippet     doc_file
abbr        """..."""
options     head
	"""${1:#:Summary}

	${2:#:Long information}

	Args:
	    ${3:#:arg1}

	Returns:
	    ${4:#:return}

	Raises:
	    ${5:#:raise}

	    Copyright (c) ${6:Year} ${7:Organization}
	      All rights reserved.

	"""
	${0}

snippet     doc_func
abbr        """..."""
options     head
	"""${1:#:Summary}

	${2:#:Long information}

	Args:
	    ${3:#:arg1}

	Returns:
	    ${4:#:return}

	Raises:
	    ${5:#:raise}
	"""

snippet     doc_class
abbr        """..."""
options     head
	"""${1:#:Summary}

	${2:#:Long information}

	Attributes:
	    ${3:#:Public attribute1}
	"""

snippet     todo
abbr        TODO(...): ...
options     word
	TODO(sc): ${1:#:What to do}

snippet     header_vars
abbr        # Global variables
options     head
	#------------------------------------------------------------------------------
	# Global variables
	#------------------------------------------------------------------------------

	__version__='1.0.0'

snippet     header_routines
abbr        # Sub routines
options     head
	#------------------------------------------------------------------------------
	# Sub routines
	#------------------------------------------------------------------------------

snippet     header_main
abbr        # Main routine
options     head
	#------------------------------------------------------------------------------
	# Main routine
	#------------------------------------------------------------------------------

snippet     func_parse_args
abbr        parse_args(...)
options     head
	import argparse

	def parse_arguments():
	    parser = argparse.ArgumentParser(
	        prog='${1:program name}',
	        description='${2:description}'
	    )

	    # Positional arguments
	    parser.add_argument('target_device', type=str,
	                        help='A block special file name of the target device',
	                        )

	    # Optional arguments
	    parser.add_argument('--version',
	                        action='version',
	                        version='%(prog)s {}'.format(__version__)
	                        )
	    parser.add_argument('--verbose', '-v',
	                        dest='verbose',
	                        action='store_true',
	                        help='verbose mode'
	                        )

	    return parser.parse_args()


	args = parse_arguments()

	def parse_arguments():
	    parser = argparse.ArgumentParser(
	        description="Isotonic Regression benchmark tool")
	    parser.add_argument('--iterations', type=int, required=True,
	                        help="Number of iterations to average timings over "
	                        "for each problem size")
	    parser.add_argument('--log_min_problem_size', type=int, required=True,
	                        help="Base 10 logarithm of the minimum problem size")
	    parser.add_argument('--show_plot', action='store_true',
	                        help="Plot timing output with matplotlib")
	    parser.add_argument('--dataset', choices=DATASET_GENERATORS.keys(),
	                        required=True)

	    return parser.parse_args()
