snippet #!
abbr    #!/usr/bin/env bash
alias   shebang
options head
	#!/usr/bin/env ${1:bash}
	${0}

snippet if
	if [ ${1:#:condition} ]; then
		${0:TARGET}
	fi


snippet el
	else
		${0:TARGET}


snippet elif
	elif [ ${1:#:condition} ]; then
		${0:TARGET}


snippet for
	for ${1:i} in ${2:#:words}; do
		${0:TARGET}
	done

snippet while
alias wh
	while ${1:#:condition} ; do
		${0:TARGET}
	done

snippet until
	until ${1:#:condition} ; do
		${0:TARGET}
	done

snippet heredoc
alias   h <<
	<< ${1:EOF}
		${0:#:TARGET}
	$1

snippet tmp
	${1:TMPFILE}=$(mktemp ${2:XXX})
	trap "rm -f '${$1}'" 0               # EXIT
	trap "rm -f '${$1}'; exit 1" 2       # INT
	trap "rm -f '${$1}'; exit 1" 1 15    # HUP TERM
	${0}

snippet function
	${1:#:name}()
	{
		${0:TARGET}
	}

snippet     match-regexp
abbr        =~
options     head
	if [[ $${1:string} =~ ${2:^regexp.*} ]]; then
		${0}
	fi

snippet     assign
abbr        var-assign
options     head
	${1:name}="${2:something}"

snippet     case
options     head
	case "$${1:{name\}}" in
		${2:pattern*})
			${0}
			;;
		*)
			${3:echo "$$1 Didn't match anything"}
	esac

snippet     copyright
options     head
	#
	#   Copyright (c) ${1:Year} ${2:Organization}
	#     All rights reserved.
	#
	${0}

#
# Definitions
#
snippet     myname
options     head
	SCRIPT_NAME="$(basename "${BASH_SOURCE:-${(%):-%N}}")"
	SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE:-${(%):-%N}}")"; pwd)"
	SCRIPT_VERSION="0.0.1"

snippet     shellcheck_disable
options     head
	# shellcheck disable=SC${1:2034}

snippet     color
options     head
	# Define ANSI colors and formatting
	if [ "${TERM:-dumb}" != "dumb" ]; then
	    TXTUNDERLINE="\e[4m"
	    TXTBOLD="\e[1m"
	    TXTRED="\e[31m"
	    TXTGREEN="\e[32m"
	    TXTYELLOW="\e[33m"
	    TXTBLUE="\e[34m"
	    TXTRESET="\e[0m"
	else
	    # shellcheck disable=SC2034
	    TXTUNDERLINE=""
	    # shellcheck disable=SC2034
	    TXTBOLD=""
	    # shellcheck disable=SC2034
	    TXTRED=""
	    # shellcheck disable=SC2034
	    TXTGREEN=""
	    # shellcheck disable=SC2034
	    TXTYELLOW=""
	    # shellcheck disable=SC2034
	    TXTBLUE=$""
	    # shellcheck disable=SC2034
	    TXTRESET=""
	fi

snippet     header_definitions
options     head
	#==============================================================================
	# Definitions
	#==============================================================================

snippet     header_subroutines
options     head
	#==============================================================================
	# Sub routines
	#==============================================================================

snippet     header_mainroutine
options     head
	#==============================================================================
	# Main routines
	#==============================================================================

#
# Handy functions
#
snippet     func_show_help
options     head
	show_help()
	{
	    cat <<__EOT__
	Usage:
	  ${SCRIPT_NAME} <arg1>
	    - TBD

	Options:
	  -h         Display this help and exit.
	  -v         Verbose mode. Can be used multiple times for
	              increased verbosity.
	  -V         Show version.
	__EOT__
	}

snippet     func_show_version
options     head
	show_version()
	{
	    echo "${SCRIPT_NAME}: version ${SCRIPT_VERSION}"
	}

snippet     func_is_numeric
options     head
	### @fn is_numeric value
	### @brief Check if the given argument is a number or not.
	### @param value a value to be tested if a number of not.
	### @return 0 if it is a number, 1 if something else.
	is_numeric()
	{
	    # "'a" should be judged as not a number
	    local num=$(printf '%s' "$1" | sed "s/'/^/")
	    test "${num}" && printf "%x" "${num}" > /dev/null 2>&1
	    if [ $? -eq 0 ]; then
	        return 0
	    else
	        return 1
	    fi
	}

# The following old logic does not handle a hex value starting with "0x"
# 	is_numeric()
# 	    case "$@" in
# 	        ''|*[!0-9]*) return 1;;
# 	        *) return 0;;
# 	    esac
# 	}

snippet     func_is_decimal
options     head
	is_decimal()
	{
	    case "$@" in
	        ''|*[!0-9]*)
	            return 1
	            ;;
	        *)
	            return 0
	            ;;
	    esac
	}

snippet     func_now
options     head
	now()
	{
	    date --rfc-3339=ns
	}

snippet     func_log
options     head
	log()
	{
	    if [ -w "${LOG_FILE}" ]; then
	        echo "$*" >> "${LOG_FILE}"
	    fi
	}

snippet     func_err
options     head
	err()
	{
	    v_now=$(now)

	    echo "$*" 1>&2
	    log "[${v_now}]: $*"
	}

snippet     func_warn
options     head
	warn()
	{
	    echo "${TXTYELLOW}WARN:${TXTRESET} $*" 1>&2
	}

snippet     func_error
options     head
	err()
	{
	    echo "${TXTRED}ERROR:${TXTRESET} $*" 1>&2
	}

snippet     func_abort
options     head
	abort()
	{
	    err "$*"
	    exit 1
	}

snippet     func_info
options     head
	info()
	{
	    level=\$1
	    shift
	    msg="$*"
	    v_now=$(now)

	    is_decimal ${level}
	    if [ $? -eq 0 ]; then
	        # Oops, no number is given in the arguments. Restore the 1st argument in ${msg}
	        msg="${level} ${msg}"
	        # set default value: it will be output by default
	        level=0
	    fi

	    if [ ${level} -le ${VERBOSITY} ]; then
	        echo "${msg}"
	    fi

	    # All messages are saved into the log file even any verbosity is given.
	    log "[${v_now}]: ${msg}"
	}

snippet     func_is_root
options     head
	is_root()
	{
	    if [ ${EUID} -ne 0 ]; then
	        err "ERROR: You need to be root to perform this program."
	        return 1
	    fi
	}

snippet     func_confirm
options     head
	confirm()
	{
	    local message="\${1:Do you really want to proceed? (y/[n]):} "
	    local response

	    read -p "${message}" response
	    case "${response}" in
	        [yY][eE][sS]|[yY])
	            return 0
	            ;;
	        *)
	            return 1
	            ;;
	    esac
	}

	# Usage
	confirm || exit 1

snippet     func_parse_args
options     head
	parse_args()
	{
	    declare -a all_args=( "$@" )
	    declare -a args=""  # set after all the options are parsed.

	    # Initialize our own variables:
	    VERBOSITY=0

	    # Parse options
	    OPTIND=1 # Reset is necessary if getopts was used previously in the script.
	             # It is a good idea to make this local in a function.
	    while getopts "a:fhvV" opt; do
	        case "${opt}" in
	            a)
	                OPT_ARG_CONTENT="${OPTARG}"
	                ;;
	            f)
	                OPT_FORCE=1
	                ;;
	            h)
	                show_help
	                exit 0
	                ;;
	            v)
	                (( VERBOSITY += 1 ))
	                ;;
	            V)
	                show_version
	                exit 0
	                ;;
	            '?')
	                show_help >&2
	                exit 1
	                ;;
	        esac
	    done
	    shift "$((OPTIND-1))" # Shift off the options and optional --.

	    info 1 "VERBOSITY=${VERBOSITY}"

	    # Dump arguments
	    info 1 "all_args=${all_args[@]}"
	    args="$@"
	    info 1 "args=${args}"

	    # Parse positional arguments
	    ARG_1=\$1
	    if [ x"${ARG_1}" = x"" ]; then
	        err "No argument is specified"
	        show_help >&2
	        exit 1
	    fi
	    if [ ! -e "${ARG_1}" ]; then
	        err "Given name of file does not exist (${ARG_1})"
	        exit 1
	    fi
	    if [ ! -r "${ARG_1}" ]; then
	        err "Given name of file is not readable (${ARG_1})"
	        exit 1
	    fi
	}

	parse_args "$@"


snippet     func_logging_all
options     head
	enable_logging_all()
	{
	    local log_file="\$1"

	    if [ x"${log_file}" = x"" ]; then
	        echo "The log file location is not specified"
	        return 1
	    fi
	    if [ ! -w "${log_file}" ]; then
	        echo "The log file is not writable: ${log_file}"
	        return 2
	    fi

	    # Save the original stdout/stderr to #6 and #7 so that we can restore the
	    # originals later.
	    exec 6>&1
	    exec 7>&2

	    # Then redirect stdout/stderr to tee processes
	    exec 1> >(tee -a "${log_file}")
	    exec 2> >(tee -a "${log_file}" 1>&2)

	    return 0
	}

	disable_logging_all()
	{
	    # Restore the original stdout/stderr and close the file descriptor 6 and 7
	    exec 1>&6 6>&-
	    exec 2>&7 7>&-
	}

